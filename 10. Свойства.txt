************************************        # Stored Properties
Stored Properties - сохраняет данные, непосредственно в самой Properties
Stored Properties - есть обсерверы, но нету get & set

-----------------
willSet                                     - Stored Properties - должен выполнить, при создании новой переменной (вызывается прямо перед сохранением значения)
didSet                                      - Stored Properties - должен выполнить, при перезаписывании переменной (вызывается сразу после сохранения значения)
get                                         - Computer Properties - принимает параметры
set                                         - Computer Properties - выдаёт обработку принятого параметра

lazy var                                    - lazy always! var, переменная, которую не обязательно задействовать (иногда бывают условия когда надо)
static let maxAge = 20                      - переменная, которая статична в классе(структуре) и ее ненадо запонять (должны быть дефолтные значения
NameClassOrStructure.nameStatic             - так воспроизводить static переменную

-----------------
import Foundation                                                         // подключаем плагин для кода object-c
struct Student {
    var firstName : String {

        willSet {                                                         // willSet (что произойдёт после принятия переменной) - String - like firstName : String
            print("will set " + newValue + " instead of " + firstName)    // newValue даётся изначально! если не присвоил своей переменной
        }
        didSet {
            print("did set " + firstName + " instead of " + oldValue)

            firstName = firstName.capitalized                             // object-c Capitalized first element !
        }
    }
}

var student_1 = Student(firstName: "Sasha")
student_1.firstName = "ALEX"
student_1.firstName   // "Alex"

-----------------
let MaxNameLenght = 15 // global var

class Human {
    
    var name: String {
        didSet {
            if name.count > MaxNameLenght {
                name = oldValue
            }
        }
    }
    
    lazy var storyOfMyLife = "This is a story of my entire life..." // lazy always var, переменная, которую не обязательно задействовать (иногда бывают условия когда надо)
    
//    static let maxAge = 100 // переменная, которая статична в классе(структуре) и ее ненадо запонять (должны быть дефолтные значения)
    class var maxAge: Int {
        return 100
    }
    
    var age: Int {
        didSet {
            if age > Human.maxAge {
                age = oldValue
            }
        }
    }
    
    
    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
}


************************************        # Computer Properties
Computer Properties - не сохраняет значения сами в себя! Они используют другие переменные, для того чтобы сохранять и чтобы потом брать от туда информацию, и потом выдавать ее!
Computer Properties - есть get & set, но нету обсерверов

-----------------
get                                         - Computer Properties - принимает параметры
set                                         - Computer Properties - выдаёт обработку принятого параметра
willSet                                     - Stored Properties - должен выполнить, при создании новой переменной (вызывается прямо перед сохранением значения)
didSet                                      - Stored Properties - должен выполнить, при перезаписывании переменной (вызывается сразу после сохранения значения)

-----------------
import Foundation // add addon for object-c (all function with NString)
struct Student {
    
    var firstName : String {

        willSet {                                                         // willSet (что произойдёт после принятия переменной) - String - like firstName : String
            print("will set " + newValue + " instead of " + firstName)    // newValue даётся изначально! если не присвоил своей переменной
        }
        didSet {
            print("did set " + firstName + " instead of " + oldValue)

            firstName = firstName.capitalized                             // object-c Capitalized first element !
        }
    }
    
    var lastName : String {
        didSet {
            lastName = lastName.capitalized                     // object-c Capitalized first element !
        }
    }
    
    var fullName : String {
        get {                                                   // get так правильно оформляется
            return firstName + " " + lastName                   // если используется только get (без set), тогда можно и get не использовать, а писать сразу условия
        }
        set {                                                   // newValue даётся переменная по умолчанию, либо в скобочках задать свою
            print("fullName wants to be set to " + newValue)
            
            let words = newValue.components(separatedBy: " ")   // object-c (разбивает строку - на массивы, условия задали, что один объект записывается как наступает пробел и т.д. )
            
            if words.count > 0 {
                firstName = words[0]
            }
            
            if words.count > 1 {
                lastName = words[1]
            }
        }
    }
}

var student_1 = Student(firstName: "Sasha", lastName: "Borovitsky")
student_1.fullName = "saSHa borOVitsky"
student_1.fullName  // "Sasha Borovitsky"

-----------------
struct Cat {
    
    var name: String
    
    static let maxAge = 20                                      // переменная, которая статична в классе(структуре) и ее ненадо запонять (должны быть дефолтные значения
    
    static var totalCats = 0
    
    var age: Int {
        didSet {
            if age > Cat.maxAge {
                age = oldValue
            }
        }
    }
    
    init(name: String, age: Int) {
        self.name = name
        self.age = age
        
        Cat.totalCats += 1
    }
}