************************************        # constant
let                                         - константа
let str1 : Character = "a"                  - это характеристика с 1 символом
let array : [CustomStringConvertible] = [5, 5.4, Float(5.4)]  - 
let MaxNameLenght: Int                      - глобальная переменная (всегда пишется с Большой буквы!)


************************************        # var
var name                                    - переменная
var red, green, blue: Double                - создание переменных
var letters = Set<Character>()              - создание переменой характеристика с 1 символом
var MaxNameLenght: Int                      - глобальная переменная (всегда пишется с Большой буквы!)


************************************        # tuples
var tuple_0 : (name: String?, carNumber: Int?, mark: String?)
tuple_0.name = "Eva"

var tuple_1 = (name_1:"Eva", name_2:"Lev")  - tuples создание
var tuple_2 = (1, "Hello", true, 2.4)       - tuples создание
var (show_name_1, Show_name_2) = tuple_1    - создали отдельные переменные к значениям tuples (show_name_1, Show_name_2)

tuple_1.name_1                              - выведет Eva
tuple_1.0                                   - выведет Eva
show_name_1                                 - выведет Eva

tuple_1.name_1 = "Era"                      - изменить name_1 в тюплз вместо Eva, станет Era
tuple_1.0      = "Era"                      - изменить name_1 в тюплз вместо Eva, станет Era
show_name_1    = "Kolya"                    - изменить show_name_1 вместо Era, станет Kolya (в самом tuples как была Era, так и останется)

  -----------------                           # пример 1
  let tuple_1 = (x:1, y:2)                    // создали tuple_1 с одинаковыми названиями как у tuple_2
  var tuple_2 = (x:4, y:3)                    // создали tuple_2 с одинаковыми названиями как у tuple_1
  tuple_2 = tuple_1                           // так можно (если в тюплз совпадают название и количество параметров!)

  -----------------                           # пример 2 (var serStatus_1 : (statusCode:Int, message:String?, errorMessage:String?))
//2. С сервера к нам приходит тюпл с тремя параметрами:
//statusCode, message, errorMessage (число, строка и строка)
//в этом тюпле statusCode всегда содержит данные, но сама строка приходит только в одном поле
//если statusCode от 200 до 300 исключительно, то выводите message,
//в противном случает выводите errorMessage
//После этого проделайте тоже самое только без участия statusCode

var serStatus_1 : (statusCode:Int, message:String?, errorMessage:String?)

serStatus_1.statusCode   = 200
serStatus_1.message      = "Hello 200-300"
serStatus_1.errorMessage = "Error"

if serStatus_1.statusCode <= 200 {
    print("\(String(describing: serStatus_1.errorMessage))")
} else {
    if serStatus_1.statusCode > 300 {
        print("\(String(describing: serStatus_1.message))")
    } else {
        print("\(String(describing: serStatus_1.errorMessage))")
    }
}


************************************        # цифровые параметры и остальные
Int                                         - цифры (округляет до целого числа, в меньшую сторону всегда)
Float                                       - число, с плавающей запятой 32 битное, до 6 разрядов после запятой
Double                                      - число, с плавающей запятой 64 битное, до 15 значений после запятой
String                                      - строка
Character                                   - характеристика с 1 символом
CustomStringConvertible                     - все возможные характеристики, какие только могут быть!


************************************        # опционал
(?) Еесли переменной задаём свойство с вопросительным знаком - это означает, что переменная может быть иногда nil!
(!) А если с восклицательным знаком - то nil'а не может быть!

-----------------                           # восклицательный знак, наоборот (меняет сзначение, наоборот true/falce)
let good = true                             // создали переменную
!good                                       // falce и не меняет оператор
good = !good                                // falce и меняет оператор


************************************        # работа с текстом
print()                                     - всё выводит в одну строку
print((a,b))                                - вывести переменные a,b
println()                                   - переносит на следующую строку (уже не актуально)
/()                                         - интерполяция, делается в текстовом формате "/()" для вывода переменной
printin("Red color \(redColor)")            - (cmd) Red color red
//                                          - это комментарий
/*                                          - это тоже комментарий,
но написанный на двух строках */

-----------------
\ 0 (нулевой символ), 
\\ (обратный слэш), 
\t (горизонтальная табуляция), 
\n (новая строка), 
\r (возвращение каретки), 
\ "(двойные кавычки) и \' (одиночные кавычки )

-----------------
Произвольные скалярные величины Юникода, записанные в виде \u{n} , где n - 1-8 значное шестнадцатиричное число со значением, равным действительной точке кода Юникода.

-----------------                           # примеры
print("\(String(describing: serStatus_1.message))")